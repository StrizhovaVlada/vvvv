using System;
class MainClass
{
    public static void Main(string[] args)
    {
        Console.WriteLine("Введите строку J: ");
        string J = Console.ReadLine();

        Console.WriteLine("Введите строку S: ");
        string S = Console.ReadLine();

        int count = 0;

        foreach (char c in S)
        {
            if (J.Contains(c))
            {
                count++;
            }
        }

        Console.WriteLine(count);
    }
}

using System;
using System.Collections.Generic;

class MainClass
{
    public static void Main(string[] args)
    {
        int[] candidates = { 2, 5, 2, 1, 2 };
        int target = 5;

        List<List<int>> result = CombinationSum(candidates, target);

        foreach (var list in result)
        {
            Console.WriteLine("[" + string.Join(",", list) + "]");
        }
    }

    public static List<List<int>> CombinationSum(int[] candidates, int target)
    {
        Array.Sort(candidates);
        List<List<int>> result = new List<List<int>>();
        Backtrack(result, new List<int>(), candidates, target, 0);
        return result;
    }

    public static void Backtrack(List<List<int>> result, List<int> tempList, int[] candidates, int remaining, int start)
    {
        if (remaining < 0) return;

        else if (remaining == 0) result.Add(new List<int>(tempList));

        else
        {
            for (int i = start; i < candidates.Length; i++)
            {
                if (i > start && candidates[i] == candidates[i - 1]) continue; 
                tempList.Add(candidates[i]);
                Backtrack(result, tempList, candidates, remaining - candidates[i], i + 1);
                tempList.RemoveAt(tempList.Count - 1);
            }
        }
    }
}

using System;
public class Program
{
    public static bool ContainsDuplicate(int[] nums)
    {
        Array.Sort(nums);
        for (int i = 0; i < nums.Length - 1; i++)
        {
            if (nums[i] == nums[i + 1])
            {
                return true;
            }
        }
        return false;
    }
public static void Main()
    {
        int[] nums1 = { 1, 2, 3, 4 };
        int[] nums2 = { 1, 1, 1, 3, 3, 4, 3, 2, 4, 2 };
        int[] nums3 = { 1, 2, 3, 1 };

        Console.WriteLine(ContainsDuplicate(nums1)); 
        Console.WriteLine(ContainsDuplicate(nums2)); 
        Console.WriteLine(ContainsDuplicate(nums3)); 
    }
}

using System;

class Student
{
    public string LastName { get; set; }
    public DateTime DateOfBirth { get; set; }
    public string GroupNumber { get; set; }
    public int[] Grades { get; set; }

    public void UpdateLastName(string newLastName)
    {
        LastName = newLastName;
    }

    public void UpdateDateOfBirth(DateTime newDateOfBirth)
    {
        DateOfBirth = newDateOfBirth;
    }

    public void UpdateGroupNumber(string newGroupNumber)
    {
        GroupNumber = newGroupNumber;
    }

    public void DisplayStudentInfo()
    {
        Console.WriteLine("Информация о студенте: ");
        Console.WriteLine("Фамилия: " + LastName);
        Console.WriteLine("Дата рождения: " + DateOfBirth.ToShortDateString());
        Console.WriteLine("Номер группы: " + GroupNumber);
        Console.WriteLine("Оценки:  ");
        foreach (int grade in Grades)
        {
            Console.Write(grade + " ");
        }
        Console.WriteLine();
    }
}

class Program
{
    static void Main()
    {
        Student student = new Student();
        student.LastName = "Иванов";
        student.DateOfBirth = new DateTime(2000, 5, 10);
        student.GroupNumber = "111";
        student.Grades = new int[] { 5, 2, 4, 4, 5 };

        student.DisplayStudentInfo();

        Console.WriteLine("Введите новую фамилию:");
        string newLastName = Console.ReadLine();

        student.UpdateLastName(newLastName);

        Console.WriteLine("Введите новую дату рождения (yyyy-mm-dd):");
        DateTime newDateOfBirth = DateTime.Parse(Console.ReadLine());

        student.UpdateDateOfBirth(newDateOfBirth);

        Console.WriteLine("Введите новый номер группы: ");
        string newGroupNumber = Console.ReadLine();

        student.UpdateGroupNumber(newGroupNumber);

        student.DisplayStudentInfo();
    }
}
using System;
class Train
{
    public string destination;
    public int trainNumber;
    public string departureTime;

    public void GetTrainInfo(int userTrainNumber)
    {
        if (userTrainNumber == trainNumber)
        {
            Console.WriteLine("Номер поезда: " + trainNumber);
            Console.WriteLine("Место назначения: " + destination);
            Console.WriteLine("Время отправления: " + departureTime);
        }
    }
}

class Program
{
    static void Main()
    {
        Train train1 = new Train();
        train1.destination = "Москва";
        train1.trainNumber = 973;
        train1.departureTime = "15:30";

        Train train2 = new Train();
        train2.destination = "Екатеринбург";
        train2.trainNumber = 416;
        train2.departureTime = "14:15";

        int userInput;
        Console.Write("Введите номер поезда: ");
        userInput = Convert.ToInt32(Console.ReadLine());

        train1.GetTrainInfo(userInput);
        train2.GetTrainInfo(userInput);
    }
}

using System;

class NumbersHandler
{
    private int number1;
    private int number2;

    public void SetNumbers(int num1, int num2)
    {
        number1 = num1;
        number2 = num2;
    }

    public void DisplayNumbers()
    {
        Console.WriteLine($"Первое число: {number1}");
        Console.WriteLine($"Второе число: {number2}");
    }

    public int CalculateSum()
    {
        return number1 + number2;
    }

    public int FindMax()
    {
        return Math.Max(number1, number2);
    }
}

class Program
{
    static void Main()
    {
        NumbersHandler handler = new NumbersHandler();

        Console.Write("Введите первое число: ");
        int num1 = Convert.ToInt32(Console.ReadLine());

        Console.Write("Введите второе число: ");
        int num2 = Convert.ToInt32(Console.ReadLine());

        handler.SetNumbers(num1, num2);

        int sum = handler.CalculateSum();
        Console.WriteLine($"Сумма чисел: {sum}");

        int max = handler.FindMax();
        Console.WriteLine($"Наибольшее число: {max}");
    }
}
using System;

class Counter
{
    private int value;

    public Counter()
    {
        value = 0;
    }

    public Counter(int startValue)
    {
        value = startValue;
    }

    public void Increment()
    {
        value++;
    }

    public void Decrement()
    {
        value--;
    }

    public int Value
    {
        get { return value; }
    }
}

class Program
{
    static void Main()
    {
        int startValue;
        Console.Write("Введите начальное значение счетчика: ");

        if (!int.TryParse(Console.ReadLine(), out startValue))
        {
            Console.WriteLine("Неверный ввод. Использование начального значения 0 ");
            startValue = 0;
        }

        Counter counter = new Counter(startValue);

        Console.WriteLine("Текущее значение счетчика: " + counter.Value);

        counter.Increment();
        Console.WriteLine("Значение после увеличения : " + counter.Value);

        counter.Decrement();
        Console.WriteLine("Значение после уменьшения: " + counter.Value);
    }
}
using System;

class MyClass
{
    private int property1;
    private string property2;

public MyClass(int p1, string p2)
    {
        property1 = p1;
        property2 = p2;
    }

    public MyClass()
    {
        property1 = 0;
        property2 = "Начальное значение ";
    }

    ~MyClass()
    {
        Console.WriteLine("Объект удален");
    }

    public void DisplayProperties()
    {
        Console.WriteLine("Значеине 1 1: " + property1);
        Console.WriteLine("Значение 2: " + property2);
    }
}

class Program
{
    static void Main()
    {
        int num;
        string text;

        Console.WriteLine("Введите целое число: ");
        num = Convert.ToInt32(Console.ReadLine());

        Console.WriteLine("Введите строку: ");
        text = Console.ReadLine();

        MyClass obj1 = new MyClass(num, text);
        obj1.DisplayProperties();

        MyClass obj2 = new MyClass();
        obj2.DisplayProperties();
    }
}

using System;
class Worker
{
    public string Name { get; set; }
    public string Surname { get; set; }
    public double Rate { get; set; }
    public int Days { get; set; }

public Worker(string name, string surname, double rate, int days)
    {
        Name = name;
        Surname = surname;
        Rate = rate;
        Days = days;
    }

    public double GetSalary()
    {
        return Rate * Days;
    }
}
class Program
{
    static void Main()
    {
        Console.WriteLine("Введите имя работника: ");
        string name = Console.ReadLine();

        Console.WriteLine("Введите фамилию работника: ");
        string surname = Console.ReadLine();

        Console.WriteLine("Введите ставку работника в день: ");
        double rate = Convert.ToDouble(Console.ReadLine());

        Console.WriteLine("Введите количество отработанных дней: ");
        int days = Convert.ToInt32(Console.ReadLine());

        Worker worker = new Worker(name, surname, rate, days);

        Console.WriteLine($"Рабочий {worker.Name} {worker.Surname} заработано {worker.GetSalary()}");

        Console.ReadLine();
    }
}
using System;

class Worker
{
    private string name;
    private string surname;
    private double rate;
    private int days;

    public Worker(string name, string surname, double rate, int days)
    {
        this.name = name;
        this.surname = surname;
        this.rate = rate;
        this.days = days;
    }

    public string GetName()
    {
        return name;
    }

    public string GetSurname()
    {
        return surname;
    }

    public double GetRate()
    {
        return rate;
    }

    public int GetDays()
    {
        return days;
    }

    public double GetSalary()
    {
        return rate * days;
    }
}

class Program
{
    static void Main()
    {
        Console.Write("Введите имя работника: ");
        string name = Console.ReadLine();

        Console.Write("Введите фамилию работника: ");
        string surname = Console.ReadLine();

        Console.Write("Введите ставку работника в день: ");
        double rate = Convert.ToDouble(Console.ReadLine());

        Console.Write("Введите количество отработанных дней: ");
        int days = Convert.ToInt32(Console.ReadLine());

        Worker worker = new Worker(name, surname, rate, days);

        Console.WriteLine("Работник {0} {1} заработал: {2}", worker.GetName(), worker.GetSurname(), worker.GetSalary());
    }
}
using System;
using System.Text;

class Calculation
{
    private StringBuilder calculationLine = new StringBuilder();

    public void SetCalculationLine(string line)
    {
        calculationLine = new StringBuilder(line);
    }

    public void SetLastSymbolCalculationLine(char symbol)
    {
        calculationLine.Append(symbol);
    }

    public string GetCalculationLine()
    {
        return calculationLine.ToString();
    }

    public char GetLastSymbol()
    {
        if (calculationLine.Length > 0)
        {
            return calculationLine[calculationLine.Length - 1];
        }
        else
        {
            return ' ';
        }
    }

    public void DeleteLastSymbol()
    {
        if (calculationLine.Length > 0)
        {
            calculationLine.Length -= 1;
        }
    }

    static void Main()
    {
        Calculation calculation = new Calculation();

        Console.WriteLine("Введите строку расчета: ");
        string line = Console.ReadLine();
        calculation.SetCalculationLine(line);

        Console.WriteLine("Строка расчета: " + calculation.GetCalculationLine());

        Console.WriteLine("Введите символ, который нужно добавить в конец строки: ");
        char symbol = Console.ReadKey().KeyChar;
        calculation.SetLastSymbolCalculationLine(symbol);

        Console.WriteLine("\n Новая строка расчета: " + calculation.GetCalculationLine());

        Console.WriteLine("Последний символ в строке расчета: " + calculation.GetLastSymbol());

        calculation.DeleteLastSymbol();
        Console.WriteLine("Строка расчета после удаления последнего символа: " + calculation.GetCalculationLine());
    }
}
using System;
class Program
{
    public static int GetValue(char c)
    {
        switch (c)
        {
            case 'I': return 1;
            case 'V': return 5;
            case 'X': return 10;
            case 'L': return 50;
            case 'C': return 100;
            case 'D': return 500;
            case 'M': return 1000;
            default: return 0;
        }
    }
    static void Main()
    {
        Console.WriteLine("Введите римское число:");
        string romanNumeral = Console.ReadLine();

        int result = RomanToInt(romanNumeral);
        Console.WriteLine($"Результат: {result}");
    }
public static int RomanToInt(string s)
    {
        int result = 0;

        for (int i = 0; i < s.Length; i++)
        {
            int current = GetValue(s[i]);

            if (i + 1 < s.Length)
            {
                int next = GetValue(s[i + 1]);

                if (current < next)
                {
                    result += next - current;
                    i++;
                }
                else
                {
                    result += current;
                }
            }
            else
            {
                result += current;
            }
        }

        return result;
    }
}